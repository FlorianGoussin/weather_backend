definitions:
  controllers.Error:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  controllers.SuccessResponse:
    properties:
      message:
        type: string
      searchTerm:
        type: string
      suggestions:
        items:
          $ref: '#/definitions/models.City'
        type: array
    type: object
  models.City:
    properties:
      country:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - country
    - name
    type: object
  models.User:
    properties:
      cities:
        items:
          type: string
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      password:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      updated_ad:
        type: string
      userId:
        type: string
    required:
    - email
    - password
    type: object
info:
  contact: {}
paths:
  /cities:
    get:
      consumes:
      - application/json
      description: Autocomplete cities based on a search term
      parameters:
      - description: Search term for autocompletion
        in: query
        name: searchTerm
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.Error'
      summary: Autocomplete cities
      tags:
      - autocomplete cities city
  /currentWeather:
    delete:
      consumes:
      - application/json
      description: Remove Current Weather using location and user information
      parameters:
      - description: User JWT Token
        in: header
        name: token
        required: true
        type: string
      - description: city name
        in: body
        name: city
        required: true
        schema:
          type: string
      - description: country name
        in: body
        name: country
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned all the current weather by location entries
          schema:
            type: string
      summary: Remove Current Weather location from user
      tags:
      - remove current weather location
    get:
      consumes:
      - application/json
      description: Get current weather entries using user cities entries
      parameters:
      - description: User JWT Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned all the current weather by location entries
          schema:
            type: string
      summary: Get current weather entries using user cities entries
      tags:
      - get all current weather
    post:
      consumes:
      - application/json
      description: Add Current Weather using location and user information
      parameters:
      - description: User JWT Token
        in: header
        name: token
        required: true
        type: string
      - description: city name
        in: body
        name: city
        required: true
        schema:
          type: string
      - description: country name
        in: body
        name: country
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully returned all the current weather by location entries
          schema:
            type: string
      summary: Add Current Weather using location and user information
      tags:
      - add current weather location
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a registered user and generates tokens
      parameters:
      - description: User's email address
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User's password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Login a user
  /register:
    get:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User's email address
        format: email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: User's password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered, inserted document ID returned
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Register user
      tags:
      - register mobile app user
swagger: "2.0"
